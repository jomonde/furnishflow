'use client';

import * as React from 'react';
import { useState, useEffect, useMemo } from 'react';
import Link from 'next/link';
import { format } from 'date-fns';
import { Icons } from '@/components/icons';
import { StatCard } from './StatCard';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
// Import hooks
import { useClients } from '@/features/clients/hooks/use-clients';
import { useTasks } from '@/features/tasks/hooks/use-tasks';
import { useSales } from '@/features/sales/hooks/use-sales';
import { useSupabase } from '@/providers/supabase-provider';

// Import types
import type { Task as TaskType } from '@/features/tasks/hooks/use-tasks';
import type { Sale as SaleType } from '@/features/sales/hooks/use-sales';
import type { Client as ClientType } from '@/types';

// Helper function to normalize task status to match TaskStatus type
const normalizeTaskStatus = (status: string = 'todo'): TaskStatus => {
  const statusStr = String(status).toLowerCase().trim();
  
  if (['done', 'completed', 'complete'].includes(statusStr)) {
    return 'done';
  }
  if (['inprogress', 'in_progress', 'in progress', 'in-progress', 'inprogressing'].includes(statusStr)) {
    return 'in_progress';
  }
  if (['cancelled', 'canceled'].includes(statusStr)) {
    return 'cancelled';
  }
  return 'todo';
};

type TaskStatus = 'todo' | 'in_progress' | 'done' | 'cancelled';

type DashboardTask = {
  id: string;
  title: string;
  status: TaskStatus;
  due_date?: string | null;
  created_at?: string;
  client_id?: string;
  priority?: 'low' | 'medium' | 'high';
  assigned_to?: string;
  description?: string;
  updated_at?: string;
};

type DashboardClient = {
  id: string
  first_name: string
  last_name: string
  email?: string
  phone?: string
  status: 'active' | 'inactive' | 'lead'
  created_at?: string
  // For backward compatibility
  name?: string
};

type DashboardSale = NonNullable<SaleType> & {
  id: string;
  total: number;
  status: 'pending' | 'completed' | 'cancelled';
  date: string | Date;
  client_id?: string;
  created_at?: string;
};

interface StatCardProps {
  title: string;
  value: string;
  icon: keyof typeof Icons;
  change: string;
}

interface ActivityItem {
  id: string;
  type: 'task' | 'sale' | 'client' | 'note' | 'sketch';
  title: string;
  description: string;
  timestamp: string;
  icon: keyof typeof Icons;
  link: string;
}

// Main dashboard page component
export default function DashboardPage() {
  // Fetch data from hooks
  const { clients = [], loading: clientsLoading } = useClients();
  const { tasks: allTasks = [], loading: tasksLoading } = useTasks();
  const { supabase, initialized: supabaseInitialized, error: supabaseError } = useSupabase();
  const { sales, loading: salesLoading, error: salesError, getSalesTotal } = useSales();
  
  // State for activities and errors
  const [recentActivities, setRecentActivities] = useState<ActivityItem[]>([]);
  const [totalSales, setTotalSales] = useState<number>(0);
  const [loading, setLoading] = useState<boolean>(true);
  const [error, setError] = useState<Error | null>(null);

  // Handle Supabase initialization errors
  useEffect(() => {
    if (supabaseError) {
      setError(supabaseError);
      setLoading(false);
    } else if (supabaseInitialized && !supabase) {
      setError(new Error('Failed to initialize Supabase client'));
      setLoading(false);
    }
  }, [supabaseInitialized, supabaseError, supabase]);

  // Calculate total sales
  useEffect(() => {
    const fetchTotalSales = async () => {
      if (!supabaseInitialized) return;
      
      try {
        setLoading(true);
        const total = await getSalesTotal('month');
        setTotalSales(total);
        setError(null);
      } catch (err) {
        console.error('Error fetching total sales:', err);
        setError(err instanceof Error ? err : new Error('Failed to fetch sales total'));
      } finally {
        setLoading(false);
      }
    };

    if (supabaseInitialized && !supabaseError) {
      fetchTotalSales();
    } else {
      setLoading(false);
    }
  }, [getSalesTotal, supabaseInitialized, supabaseError]);

  // Update loading state to include all loading states
  const isLoading = clientsLoading || tasksLoading || salesLoading || loading;
  
  // Memoized data transformations with null checks
  const safeClients = useMemo<DashboardClient[]>(
    () => (clients || [])
      .filter((client): client is NonNullable<ClientType> => client !== null)
      .map(client => {
        // Transform the client data to match DashboardClient
        const dashboardClient: DashboardClient = {
          id: client.id,
          first_name: client.first_name,
          last_name: client.last_name,
          name: `${client.first_name} ${client.last_name}`, // For backward compatibility
          email: client.email,
          phone: client.phone,
          status: (client.status as 'active' | 'inactive' | 'lead') || 'lead',
          created_at: client.created_at || new Date().toISOString(),
        };
        return dashboardClient;
      }),
    [clients]
  );

  const safeTasks = useMemo<DashboardTask[]>(
    () => (allTasks || [])
      .filter((task): task is NonNullable<TaskType> => task !== null)
      .map(task => ({
        ...task,
        status: normalizeTaskStatus(task.status || 'todo'),
        due_date: task.due_date || null,
        created_at: task.created_at || new Date().toISOString(),
        updated_at: task.updated_at || new Date().toISOString(),
      })),
    [allTasks]
  );

  const safeSales = useMemo<DashboardSale[]>(
    () => (sales || [])
      .filter((sale): sale is NonNullable<SaleType> => sale !== null)
      .map(sale => ({
        ...sale,
        status: (sale.status as 'pending' | 'completed' | 'cancelled') || 'pending',
        date: sale.created_at ? new Date(sale.created_at) : new Date(),
        client_id: sale.client_id || '',
        created_at: sale.created_at || new Date().toISOString(),
      })),
    [sales]
  );
  
  // Calculate dashboard stats
  const dashboardStats = useMemo(() => {
    const totalClients = safeClients.length;
    const completedTasks = safeTasks.filter(task => task.status === 'done').length;
    const pendingTasks = safeTasks.filter(task => 
      task.status === 'todo' || task.status === 'in_progress'
    ).length;
    const revenue = typeof totalSales === 'number' ? totalSales : 0;
    const inProgressTasks = safeTasks.filter(task => task.status === 'in_progress').length;

    // Define the stats with valid icon names from Icons object
    const stats = [
      {
        title: 'Total Clients',
        value: totalClients.toString(),
        icon: 'users' as const, // Using 'users' instead of 'clients'
        change: `${totalClients} total`
      },
      {
        title: 'Completed Tasks',
        value: completedTasks.toString(),
        icon: 'check' as const,
        change: `${completedTasks} completed`
      },
      {
        title: 'In Progress',
        value: inProgressTasks.toString(),
        icon: 'activity' as const,
        change: `${pendingTasks} pending`
      },
      {
        title: 'Total Revenue',
        value: `$${revenue.toLocaleString()}`,
        icon: 'analytics' as const,
        change: `+15% from last month`,
      },
    ] as const;
    
    // Type assertion to ensure we're using valid icon names
    return stats as unknown as Array<{
      title: string;
      value: string;
      icon: keyof typeof Icons;
      change: string;
    }>;
  }, [safeClients.length, safeTasks, totalSales]);

  // Dashboard stats are already calculated above

  // Generate and update activities when data changes
  useEffect(() => {
    if (clientsLoading || tasksLoading || salesLoading) return;
    
    try {
      const clientActivities = safeClients.slice(0, 5).map(client => ({
        id: client.id,
        type: 'client' as const,
        title: 'New Client Added',
        description: client.name || 'No name',
        timestamp: client.created_at || new Date().toISOString(),
        icon: 'user' as keyof typeof Icons,
        link: `/clients/${client.id}`,
      }));

      const taskActivities = safeTasks.slice(0, 5).map(task => ({
        id: task.id,
        type: 'task' as const,
        title: task.title || 'Untitled Task',
        description: `Status: ${task.status}`,
        timestamp: task.created_at || new Date().toISOString(),
        icon: 'check' as keyof typeof Icons,
        link: `/tasks/${task.id}`,
      }));

      const saleActivities = safeSales.slice(0, 5).map(sale => ({
        id: sale.id,
        type: 'sale' as const,
        title: 'New Sale',
        description: `$${sale.total || 0}`,
        timestamp: sale.created_at || new Date().toISOString(),
        icon: 'dollar' as keyof typeof Icons,
        link: `/sales/${sale.id}`,
      }));

      const newActivities = [...clientActivities, ...taskActivities, ...saleActivities]
        .sort((a, b) => new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime())
        .slice(0, 10);

      setRecentActivities(newActivities);
    } catch (error) {
      console.error('Error updating activities:', error);
      setErrorState('Failed to load activities');
    }
  }, [safeClients, safeTasks, safeSales, isLoading]);

  // Handle errors
  useEffect(() => {
    if (errorState) {
      console.error('Dashboard error:', errorState);
    }
  }, [errorState]);

  // Render the dashboard

    const saleActivities = safeSales.slice(0, 5).map(sale => ({
      id: sale.id,
      type: 'sale' as const,
      title: 'New Sale',
      description: `$${sale.total || 0}`,
      timestamp: sale.created_at || new Date().toISOString(),
      icon: 'dollar' as keyof typeof Icons,
      link: `/sales/${sale.id}`,
    }));

    const newActivities = [...clientActivities, ...taskActivities, ...saleActivities]
      .sort((a, b) => new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime())
      .slice(0, 10);

    setRecentActivities(newActivities);
  } catch (error) {
    console.error('Error updating activities:', error);
    setErrorState('Failed to load activities');
  }
}, [safeClients, safeTasks, safeSales, isLoading]);

// Handle errors
useEffect(() => {
  if (errorState) {
    console.error('Dashboard error:', errorState);
  }
}, [errorState]);

// Render the dashboard
if (isLoading) {
  return (
    <div className="flex h-screen items-center justify-center">
      <Icons.spinner className="h-8 w-8 animate-spin" />
    </div>
  );
}

if (error) {
  return (
    <div className="p-6">
      <div className="rounded-md bg-red-50 p-4">
        <div className="flex">
          <div className="flex-shrink-0">
            <XCircle className="h-5 w-5 text-red-400" aria-hidden="true" />
          </div>
          <div className="ml-3">
            <h3 className="text-sm font-medium text-red-800">Error loading dashboard data</h3>
            <div className="mt-2 text-sm text-red-700">
              <p>{error.message}</p>
            </div>
            <div className="mt-4">
              <button
                type="button"
                className="rounded-md bg-red-50 px-2 py-1.5 text-sm font-medium text-red-800 hover:bg-red-100 focus:outline-none focus:ring-2 focus:ring-red-600 focus:ring-offset-2 focus:ring-offset-red-50"
                onClick={() => window.location.reload()}
              >
                Retry
              </button>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}

return (
  <div className="flex-1 space-y-4 p-4 pt-6 md:p-8">
    <div className="flex items-center justify-between space-y-2">
      <h2 className="text-3xl font-bold tracking-tight">Dashboard</h2>
      <div className="flex items-center space-x-2">
        <Button>
          <Icons.plus className="mr-2 h-4 w-4" />
          Add New
        </Button>
      </div>
    </div>
    
    {/* Stats Grid */}
    <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-4">
      {dashboardStats.map((stat, i) => (
        <StatCard key={i} {...stat} />
      ))}
    </div>
    
    {/* Main Content */}
    <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-7">
      {/* Recent Tasks */}
      <Card className="col-span-4">
        <CardHeader>
          <CardTitle>Recent Tasks</CardTitle>
        </CardHeader>
        <CardContent>
          {safeTasks.length > 0 ? (
            <div className="space-y-4">
              {safeTasks
                .sort((a: DashboardTask, b: DashboardTask) => {
                  const dateA = a.due_date ? new Date(a.due_date).getTime() : Number.MAX_SAFE_INTEGER;
                  const dateB = b.due_date ? new Date(b.due_date).getTime() : Number.MAX_SAFE_INTEGER;
                  return dateA - dateB;
                })
                .slice(0, 5)
                .map((task) => (
                  <div
                    key={task.id}
                    className="flex items-center justify-between rounded-lg border p-4 hover:bg-accent/50"
                  >
                    <div>
                      <p className="font-medium">{task.title}</p>
                      <p className="text-sm text-muted-foreground">
                        {task.due_date
                          ? `Due: ${format(new Date(task.due_date), 'MMM d, yyyy')}`
                          : 'No due date'}
                      </p>
      {/* Main Content */}
      <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-7">
        {/* Recent Tasks */}
        <Card className="col-span-4">
          <CardHeader>
            <CardTitle>Recent Tasks</CardTitle>
          </CardHeader>
          <CardContent>
            {safeTasks.length > 0 ? (
              <div className="space-y-4">
                {safeTasks
                  .sort((a: DashboardTask, b: DashboardTask) => {
                    const dateA = a.due_date ? new Date(a.due_date).getTime() : Number.MAX_SAFE_INTEGER;
                    const dateB = b.due_date ? new Date(b.due_date).getTime() : Number.MAX_SAFE_INTEGER;
                    return dateA - dateB;
                  })
                  .slice(0, 5)
                  .map((task) => (
                    <div
                      key={task.id}
                      className="flex items-center justify-between rounded-lg border p-4 hover:bg-accent/50"
                    >
                      <div>
                        <p className="font-medium">{task.title}</p>
                        <p className="text-sm text-muted-foreground">
                          {task.due_date
                            ? `Due: ${format(new Date(task.due_date), 'MMM d, yyyy')}`
                            : 'No due date'}
                        </p>
                      </div>
                      <span
                        className={`inline-flex items-center rounded-full px-2.5 py-0.5 text-xs font-medium ${
                          task.status === 'done'
                            ? 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200'
                            : task.status === 'in_progress'
                            ? 'bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200'
                            : task.status === 'cancelled'
                            ? 'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200'
                            : 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200'
                        }`}
                      >
                        {task.status.replace('_', ' ')}
                      </span>
                    </div>
                  ))}
              </div>
            ) : (
              <div className="flex h-[200px] items-center justify-center rounded-md border border-dashed">
                <div className="flex flex-col items-center gap-1 text-center">
                  <h3 className="text-lg font-semibold">No tasks yet</h3>
                  <p className="text-sm text-muted-foreground">
                    You don't have any tasks yet. Start by creating a new one.
                  </p>
                  <Button className="mt-4">Create Task</Button>
                </div>
              </div>
            )}
            <button className="flex items-center justify-between rounded-lg border p-4 hover:bg-accent">
              <div className="flex items-center space-x-4">
                <Icons.calendar className="h-5 w-5" />
                <span>Schedule Follow-up</span>
              </div>
              <Icons.chevronRight className="h-4 w-4 text-muted-foreground" />
            </button>
          </CardContent>
        </Card>
      </div>
    </div>
  )
}
